// Copyright Jamie Iles, 2017
//
// This file is part of s80x86.
//
// s80x86 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// s80x86 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with s80x86.  If not, see <http://www.gnu.org/licenses/>.

.at 0xa4;
    jmp movsb;

.auto_address;
movsb:
    ra_sel SI, rb_cl, jmp_if_not_rep movsb_no_rep;
movsb_rep_loop:
    ra_sel CX, jmp_rb_zero movsb_done;
    ra_sel SI, a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op SUB,
        rd_sel_source MICROCODE_RD_SEL, rd_sel CX;
movsb_no_rep:
    a_sel RA, alu_op SELA, mar_wr_sel Q, mar_write, ra_sel SI, segment DS;
    width W8, segment DS, mem_read;

    ra_sel DI, a_sel MAR, b_sel IMMEDIATE, immediate 0x1, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel SI;
    ra_sel DI, a_sel RA, alu_op SELA, mar_wr_sel Q, mar_write,
        segment ES, segment_force;
    width W8, segment ES, segment_force, mem_write,
        jmp_if_not_rep movsb_done_no_rep;
    a_sel MAR, b_sel IMMEDIATE, immediate 0x1, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel DI, rb_cl, ext_int_yield,
        jmp movsb_rep_loop;
movsb_done:
    next_instruction;
movsb_done_no_rep:
    a_sel MAR, b_sel IMMEDIATE, immediate 0x1, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel DI, next_instruction;

.at 0xa5;
    jmp movsw;

.auto_address;
movsw:
    ra_sel SI, rb_cl, jmp_if_not_rep movsw_no_rep;
movsw_rep_loop:
    ra_sel CX, jmp_rb_zero movsw_done;
    ra_sel SI, a_sel RA, b_sel IMMEDIATE, immediate 0x1, alu_op SUB,
        rd_sel_source MICROCODE_RD_SEL, rd_sel CX;
movsw_no_rep:
    a_sel RA, alu_op SELA, mar_wr_sel Q, mar_write, ra_sel SI;
    a_sel RA, b_sel IMMEDIATE, immediate 0x2, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel SI,
        segment DS;
    segment DS, mem_read, ra_sel DI, a_sel RA, alu_op SELA, mar_wr_sel Q,
        mar_write;
    a_sel RA, b_sel IMMEDIATE, immediate 0x2, alu_op NEXT,
        rd_sel_source MICROCODE_RD_SEL, rd_sel DI,
        segment ES, segment_force;
    segment ES, segment_force, mem_write, jmp_if_not_rep movsw_done;

    rb_cl, ext_int_yield, jmp movsw_rep_loop;
movsw_done:
    next_instruction;
